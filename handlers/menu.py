from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.inline import MAIN_MENU_KB
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from keyboards.inline import DIRECTION_KB, LOCATION_KB, ACHIEVEMENTS_KB, BACK_KB
from states.university import UniversityForm
import logging
from utils.database import db
from utils.openrouter import generate_universities
import re
logger = logging.getLogger(__name__)
router = Router()



@router.callback_query(F.data == "main_menu")
@router.message(CommandStart())
async def main_menu(event: Message | CallbackQuery, state: FSMContext):
    await state.clear()

    if isinstance(event, CallbackQuery):
        await event.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KB)
    else:
        await event.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KB)

@router.callback_query(F.data == "my_history")
async def show_history(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    history = db.get_user_plans(user_id)

    if not history:
        await callback.message.edit_text("üìú –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=BACK_KB)
        return

    kb = InlineKeyboardBuilder()
    for entry in history:
        kb.button(text=f"{entry['query_text']} ({entry['timestamp']})", callback_data=f"view_plan_{entry['id']}")
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    kb.adjust(1)

    await callback.message.edit_text("üìú –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:")
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    kb = InlineKeyboardBuilder()
    for entry in history:
        kb.button(text=f"{entry['query_text']} ({entry['timestamp']})", callback_data=f"view_plan_{entry['id']}")
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    kb.adjust(1)

    await callback.message.edit_text("üìú –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:")
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())


@router.callback_query(F.data == "help")
async def help_command(callback: CallbackQuery, state: FSMContext):
    help_text = (
        "üìö **–ö–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å**:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ **¬´–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω¬ª** –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "4. –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –ï–ì–≠ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ü—Ä–æ—Ñ. –º–∞—Ç 100\n"
        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100"
    )

    if callback.message.text != help_text:
        await callback.message.edit_text(help_text, reply_markup=BACK_KB)


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback.message.text != "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:":
        await callback.message.edit_text("üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KB)