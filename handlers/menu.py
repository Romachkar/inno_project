from keyboards.inline import LOCATION_KB
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from keyboards.inline import DIRECTION_KB
from states.university import UniversityForm
from utils.openrouter import generate_universities
import logging
import re

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "create_plan")
async def create_plan(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UniversityForm.location_choice)
    await callback.message.edit_text("üåç –ì–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–∏—Ç—å—Å—è?", reply_markup=LOCATION_KB)


# üåç –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
@router.callback_query(F.data.startswith("location:"))
async def choose_location(callback: CallbackQuery, state: FSMContext):
    location_type = callback.data.split(":")[1]
    await state.update_data(location_type=location_type)

    if location_type == "russia":
        await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –†–æ—Å—Å–∏–∏:")
        await state.set_state(UniversityForm.cities_russia)

    elif location_type == "other":
        await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—É):")
        await state.set_state(UniversityForm.cities_other)

    else:
        await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(UniversityForm.cities_other)


# üèô –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ (–†–æ—Å—Å–∏—è)
@router.message(UniversityForm.cities_russia)
async def process_city_russia(message: Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(cities=[city])
    await message.answer("üß≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=DIRECTION_KB)


# üåê –í–≤–æ–¥ —Å—Ç—Ä–∞–Ω—ã/–≥–æ—Ä–æ–¥–∞ (–¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã)
@router.message(UniversityForm.cities_other)
async def process_location_other(message: Message, state: FSMContext):
    locations = [loc.strip() for loc in message.text.split(",")]
    if len(locations) < 1 or len(locations) > 5:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –ª–æ–∫–∞—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        return

    await state.update_data(cities=locations)
    await message.answer("üß≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=DIRECTION_KB)


# üß≠ –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("direction:"))
async def process_direction(callback: CallbackQuery, state: FSMContext):
    direction = callback.data.split(":")[1]
    await state.update_data(direction=direction)

    if callback.message.text != "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –ï–ì–≠ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü—Ä–∏–º–µ—Ä:\n–ü—Ä–æ—Ñ. –º–∞—Ç 100\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100":
        await callback.message.edit_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –ï–ì–≠ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ü—Ä–æ—Ñ. –º–∞—Ç 100\n"
            "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100"
        )

    await state.set_state(UniversityForm.scores)


# üìä –í–≤–æ–¥ –±–∞–ª–ª–æ–≤ –ï–ì–≠
@router.message(UniversityForm.scores)
async def process_scores(message: Message, state: FSMContext):
    lines = [line.strip() for line in message.text.split("\n") if line.strip()]
    scores = {}

    for line in lines:
        match = re.match(r"^(.+?)\s+(\d+)$", line)
        if not match:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–ü—Ä–∏–º–µ—Ä:\n–ü—Ä–æ—Ñ. –º–∞—Ç 100\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100")
            return

        subject = match.group(1).strip()
        score = int(match.group(2))

        if not (0 <= score <= 100):
            await message.answer("‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
            return

        scores[subject] = score

    data = await state.get_data()
    data["scores"] = scores
    await state.clear()

    await message.answer("üïí –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    recommendations = await generate_universities(data)

    await message.answer("üéì –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—É–∑—ã:")
    await message.answer(recommendations)