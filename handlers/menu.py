from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from utils.database import db
import re
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from keyboards.inline import MAIN_MENU_KB, DIRECTION_KB, LOCATION_KB, BACK_KB
from states.university import UniversityForm
from utils.openrouter import generate_universities
logger = logging.getLogger(__name__)
router = Router()


def get_user_name(event: Message | CallbackQuery) -> str:

    if isinstance(event, Message):
        user = event.from_user
    else:
        user = event.from_user

    if user.full_name:
        return user.full_name
    elif user.username:
        return f"@{user.username}"
    else:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

@router.callback_query(F.data == "main_menu")
@router.message(CommandStart())
async def main_menu(event: Message | CallbackQuery, state: FSMContext):
    await state.clear()


@router.callback_query(F.data == "main_menu")
@router.message(CommandStart())
async def main_menu(event: Message | CallbackQuery, state: FSMContext):
    await state.clear()
    user_name = get_user_name(event)
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",reply_markup=MAIN_MENU_KB)
    else:
        await event.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KB)



@router.callback_query(F.data == "my_history")
async def show_history(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    history = db.get_user_plans(user_id)

    if not history:
        await callback.message.edit_text("üìú –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=BACK_KB)
        return

    kb = InlineKeyboardBuilder()
    for entry in history:
        kb.button(text=f"{entry['query_text']} ({entry['timestamp']})", callback_data=f"view_plan_{entry['id']}")
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    kb.adjust(1)

    await callback.message.edit_text("üìú –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:")
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    kb = InlineKeyboardBuilder()
    for entry in history:
        kb.button(text=f"{entry['query_text']} ({entry['timestamp']})", callback_data=f"view_plan_{entry['id']}")
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    kb.adjust(1)

    await callback.message.edit_text("üìú –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:")
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())


@router.callback_query(F.data == "my_plans")
async def my_plans(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    plans = db.get_user_plans(user_id)

    if not plans:
        if callback.message.text != "üìú –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤":
            await callback.message.edit_text("üìú –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=BACK_KB)
        return

    kb = InlineKeyboardBuilder()
    for plan in plans:
        kb.button(
            text=f"{plan['query_text']} ({plan['timestamp']})",
            callback_data=f"view_plan_{plan['id']}"
        )
    kb.add(InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history"))
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    kb.adjust(1)

    if callback.message.text.startswith("üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"):
        await callback.message.edit_text("üìú –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:")
        await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    else:
        await callback.message.answer("üìú –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:", reply_markup=kb.as_markup())

@router.callback_query(F.data == "help")
async def help_command(callback: CallbackQuery, state: FSMContext):
    help_text = (
        "üìö –ö–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "4. –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –ï–ì–≠ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ü—Ä–æ—Ñ. –º–∞—Ç 100\n"
        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100"
    )
    if callback.message.text != help_text:
        await callback.message.edit_text(help_text, reply_markup=BACK_KB)


@router.callback_query(F.data == "create_plan")
async def create_plan(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UniversityForm.location_choice)
    await callback.message.edit_text("üåç –ì–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–∏—Ç—å—Å—è?", reply_markup=LOCATION_KB)


@router.callback_query(F.data.startswith("location:"))
async def handle_location(callback: CallbackQuery, state: FSMContext):
    location_type = callback.data.split(":")[1]
    await state.update_data(location_type=location_type)

    if location_type == "russia":
        await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –†–æ—Å—Å–∏–∏:")
        await state.set_state(UniversityForm.cities_russia)

    elif location_type == "other":
        await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—É):")
        await state.set_state(UniversityForm.cities_other)

    else:
        await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(UniversityForm.cities_other)


@router.message(UniversityForm.cities_russia)
async def process_city_russia(message: Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(cities=[city])
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–ª–∏–º–ø–∏–∞–¥—ã, –ø—Ä–æ–µ–∫—Ç—ã, –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ):")
    await state.set_state(UniversityForm.achievements)


@router.message(UniversityForm.cities_other)
async def process_location_other(message: Message, state: FSMContext):
    locations = [loc.strip() for loc in message.text.split(",") if loc.strip()]
    if len(locations) < 1 or len(locations) > 5:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –ª–æ–∫–∞—Ü–∏–π")
        return

    await state.update_data(cities=locations)
    await message.answer("üß≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=DIRECTION_KB)


@router.message(UniversityForm.achievements)
async def process_achievements(message: Message, state: FSMContext):
    achievements = message.text.strip()
    if not achievements:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        return

    await state.update_data(achievements=achievements)
    await state.set_state(UniversityForm.direction)
    await message.answer(f"üß≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=DIRECTION_KB)


@router.callback_query(F.data.startswith("direction:"))
async def process_direction(callback: CallbackQuery, state: FSMContext):
    direction = callback.data.split(":")[1]
    await state.update_data(direction=direction)

    user_name = get_user_name(callback)

    if callback.message.text != f"‚úçÔ∏è {user_name}, –≤–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –ï–ì–≠ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü—Ä–∏–º–µ—Ä:\n–ü—Ä–æ—Ñ. –º–∞—Ç 100\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100":
        await callback.message.edit_text(
            f"‚úçÔ∏è {user_name}, –≤–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –ï–ì–≠ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ü—Ä–æ—Ñ. –º–∞—Ç 100\n"
            "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100"
        )

    await state.set_state(UniversityForm.scores)


@router.message(UniversityForm.scores)
async def process_scores(message: Message, state: FSMContext):
    lines = [line.strip() for line in message.text.split("\n") if line.strip()]
    scores = {}

    for line in lines:
        match = re.match(r"^(.+?)\s+(\d+)$", line)
        if not match:
            user_name = get_user_name(message)
            await message.answer(
                f"‚ùå {user_name}, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ü—Ä–æ—Ñ. –º–∞—Ç 100\n"
                "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 100\n"
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 100"
            )
            return

        subject = match.group(1).strip()
        score = int(match.group(2))

        if not (0 <= score <= 100):
            user_name = get_user_name(message)
            await message.answer(
                f"‚ùå {user_name}, –±–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 100"
            )
            return

        scores[subject] = score

    data = await state.get_data()
    data["scores"] = scores
    await state.clear()

    recommendations = await generate_universities(data)
    db.log_query(message.from_user.id, f"plan_{data['direction']}", recommendations)

    await message.answer("üïí –ò—â–µ–º –≤—ã–∑—É –¥–ª—è –≤–∞—Å...")
    await message.answer("üéì –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—É–∑—ã:")
    await message.answer(recommendations, parse_mode="Markdown")


