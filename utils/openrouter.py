import os
import httpx
import logging

logger = logging.getLogger(__name__)


async def generate_universities(data):
    prompt = f"""
–¢—ã ‚Äî –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –≤—É–∑–æ–≤ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è. –£—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—É–∑–æ–≤, –≥–¥–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ. 
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –±—é–¥–∂–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ / –ø–ª–∞—Ç–Ω–æ–µ, —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è (–æ—á–Ω–∞—è / –∑–∞–æ—á–Ω–∞—è), –ø—Ä–µ—Å—Ç–∏–∂ –≤—É–∑–∞, –Ω–∞–ª–∏—á–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è, –≤–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ç.–¥.
–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–∏ –¢–û–ü-10, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω 5 –≥–æ—Ä–æ–¥–æ–≤, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ 4 –≥–æ—Ä–æ–¥–∞ 8 –≤—É–∑–æ–≤, –µ—Å–ª–∏ 3 —Ç–æ 6, –∞ –µ—Å–ª–∏ 2 —Ç–æ 5 –∏ –Ω–∞ 1 –≥–æ—Ä–æ–¥ 5 –≤  —É–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ:

–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É—Ä–æ–≤–Ω—é –ï–ì–≠.
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.
–ò–º–µ—é—Ç —Å–∏–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.
–£—á–∏—Ç—ã–≤–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—É–∑–∞ —É–∫–∞–∂–∏:

–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–µ—Å—Ç–∏–∂, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è).
–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ).
–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –≤—É–∑–µ.
–°—Å—ã–ª–∫—É –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    """

    if data.get("location_type") == "russia":
        prompt += f"–ì–æ—Ä–æ–¥–∞ (–†–æ—Å—Å–∏—è): {', '.join(data['cities'])}\n"
    elif data.get("location_type") == "other":
        prompt += f"–°—Ç—Ä–∞–Ω—ã/–≥–æ—Ä–æ–¥–∞: {', '.join(data['cities'])}\n"
    else:
        prompt += f"–ì–æ—Ä–æ–¥–∞: {', '.join(data['cities'])}\n"

    if "achievements" in data:
        prompt += f"üèÜ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {data['achievements']}\n"

    if "achievements" in data:
        achievements_text = ", ".join({
        "olympic": "–û–ª–∏–º–ø–∏–∞–¥—ã",
        "portfolio": "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        "volunteer": "–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ",
        "projects": "–ù–∞—É—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"
        }.get(a, a) for a in data["achievements"])
        prompt += f"üèÜ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {achievements_text}\n"

    prompt += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['direction']}\n"
    scores_text = "\n".join(f"- {subj}: {score}" for subj, score in data["scores"].items())
    prompt += f"–ë–∞–ª–ª—ã –ï–ì–≠:\n{scores_text}\n"
    prompt += """–ü–ò–®–ò –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú, –ö–†–ê–°–ò–í–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê, –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ –∫–∞–∂–¥—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –±–æ–ª—å—à–µ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–µ–Ω—å—à–µ –≤–æ–¥—ã """
    prompt += "–ü–ò–®–ò –¢–ï–ö–°–¢ –ë–ï–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø '###'"
    prompt += "–ü–ò–®–ò –¢–ï–ö–°–¢ –ë–´–°–¢–†–û, —Ç–∞–∫ –∂–µ —É—á–∏—Ç—ã–≤–∞–π –∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–∞–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å–¥–∞–≤–∞–ª –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={"Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}"},
                json={
                    "model": "deepseek/deepseek-chat-v3-0324:free",
                    "messages": [{"role": "user", "content": prompt}],
                    "max_tokens": 4000
                },
                timeout=30
            )

            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.text}")
                return "‚ö† –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            return response.json()["choices"][0]["message"]["content"]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"