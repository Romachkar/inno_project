import os
import httpx
import logging

logger = logging.getLogger(__name__)


async def generate_universities(data):
    prompt = f"""
Ты — эксперт по высшему образованию, помогающий абитуриентам выбрать оптимальные вузы для поступления. 
Проанализируй следующие данные абитуриента и предложи лучшие варианты вузов:

### Основная информация:
1. **Желаемое место обучения**: 
   - {'Города России: ' + ', '.join(data['cities']) if data.get("location_type") == "russia" else
    'Международные локации: ' + ', '.join(data['cities']) if data.get("location_type") == "other" else
    'Локации: ' + ', '.join(data['cities'])}

2. **Направление подготовки**: {data['direction']}

3. **Баллы ЕГЭ**:
{chr(10).join(f"   - {subject}: {score}" for subject, score in data["scores"].items())}

4. **Индивидуальные достижения**: {data.get('achievements', 'не указаны')}

### Требования к анализу:
- Рассчитай общий конкурсный балл с учетом индивидуальных достижений (дополнительные баллы)
- Учитывай следующие параметры для каждого вуза:
  * Бюджетные/платные места
  * Формы обучения (очная, очно-заочная, заочная)
  * Наличие общежития
  * Военная кафедра
  * Международные программы и стажировки
  * Проходные баллы за последние 3 года
  * Перспективы трудоустройства
  * Уникальные особенности вуза по выбранному направлению
- Для городов России особое внимание удели:
  * Национальным исследовательским университетам
  * Федеральным университетам
  * Вузам программы "5-100"
- Для международных направлений:
  * Учитывай рейтинги QS и THE
  * Языковые требования
  * Стоимость обучения и стипендии

### Формат рекомендаций:
1. Для каждого вуза предоставь:
   - **Название** и краткое описание преимуществ
   - **Факультет/направление** (ссылка на программу)
   - **Проходной балл**: средний за последние годы
   - **Конкурсный балл абитуриента**: расчётный балл с учётом достижений
   - **Шансы поступления**: высокие/средние/низкие
   - **Особенности**: общежитие, военная кафедра, международные программы
   - **Сайт**: прямая ссылка на программу

2. Количество рекомендаций:
   - 1 город: 5 вузов
   - 2 города: 5 вузов
   - 3 города: 6 вузов
   - 4 города: 8 вузов
   - 5 городов: 10 вузов

3. Дополнительно:
   - Упомяни альтернативные варианты (смежные специальности)
   - Отметь вузы, где достижения дают особые преимущества
   - Предупреди о возможных рисках (высокий конкурс, дополнительные требования)

### Важные указания:
- Используй только русский язык
- Форматируй ответ с помощью Markdown
- Избегай общих фраз, только конкретика
- Учитывай все предметы ЕГЭ, даже если они не соответствуют направлению
- Для международных вузов укажи требования к языку
- Не используй символы ### для заголовков
- Будь максимально полезен и точен
"""

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={"Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}"},
                json={
                    "model": "deepseek/deepseek-chat-v3-0324:free",
                    "messages": [{"role": "user", "content": prompt}],
                    "max_tokens": 4000,
                    "temperature": 0.3
                },
                timeout=45
            )

            if response.status_code != 200:
                logger.error(f"Ошибка API: {response.status_code} - {response.text}")
                return "⚠️ Сервис временно недоступен. Попробуйте позже."

            result = response.json()["choices"][0]["message"]["content"]

            if "проходной балл" not in result.lower():
                logger.warning("В ответе отсутствует информация о проходных баллах")
                result += "\n\nℹ️ Уточните проходные баллы на сайтах вузов, так как они могут меняться"

            return result

        except httpx.TimeoutException:
            logger.error("Таймаут запроса к нейросети")
            return "⚠️ Превышено время ожидания ответа. Попробуйте сократить запрос."
        except Exception as e:
            logger.error(f"Ошибка генерации: {str(e)}")
            return "⚠️ Не удалось получить рекомендации. Проверьте введенные данные."