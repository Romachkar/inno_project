import os
import httpx
import logging

logger = logging.getLogger(__name__)
async def generate_universities(data):
    prompt = f"""
    üéì –†–∞—Å—Å—á–∏—Ç–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—É–∑–æ–≤ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:
    üèô –ì–æ—Ä–æ–¥–∞: {', '.join(data['cities'])}
    üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['direction']}
    üìä –ë–∞–ª–ª—ã –ï–ì–≠: {', '.join(map(str, data['scores']))}

    üîç –ü–æ–∫–∞–∂–∏ –≤—É–∑—ã, –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å —Å —Ç–∞–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏ –≤ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö, –Ω–æ –±–µ–∑ —Ç–∞–±–ª–∏—Ü, –∞ —Ç–∞–∫ –∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={"Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}"},
                json={
                    "model": "",
                    "messages": [{"role": "user", "content": prompt}],
                    "max_tokens": 10000000
                },
                timeout=30
            )

            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.text}")
                return "‚ö† –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            response_data = response.json()
            if "choices" not in response_data:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_data}")
                return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"

            raw_response = response_data["choices"][0]["message"]["content"]
            formatted_response = raw_response.replace("1.", "üìå").replace("2.", "üìå").replace("3.", "üìå")
            return formatted_response

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            return "‚ö† –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"